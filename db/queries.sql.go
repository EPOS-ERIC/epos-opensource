// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
)

const deleteDocker = `-- name: DeleteDocker :exec
DELETE FROM
    docker
WHERE
    name = ?
`

func (q *Queries) DeleteDocker(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteDocker, name)
	return err
}

const deleteKubernetes = `-- name: DeleteKubernetes :exec
DELETE FROM
    kubernetes
WHERE
    name = ?
`

func (q *Queries) DeleteKubernetes(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteKubernetes, name)
	return err
}

const getAllDocker = `-- name: GetAllDocker :many
SELECT
    name, directory, api_url, gui_url
FROM
    docker
`

// Docker queries
func (q *Queries) GetAllDocker(ctx context.Context) ([]Docker, error) {
	rows, err := q.db.QueryContext(ctx, getAllDocker)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Docker
	for rows.Next() {
		var i Docker
		if err := rows.Scan(
			&i.Name,
			&i.Directory,
			&i.ApiUrl,
			&i.GuiUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllKubernetes = `-- name: GetAllKubernetes :many
SELECT
    name, directory, context, api_url, gui_url
FROM
    kubernetes
`

// Kubernetes queries
func (q *Queries) GetAllKubernetes(ctx context.Context) ([]Kubernetes, error) {
	rows, err := q.db.QueryContext(ctx, getAllKubernetes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kubernetes
	for rows.Next() {
		var i Kubernetes
		if err := rows.Scan(
			&i.Name,
			&i.Directory,
			&i.Context,
			&i.ApiUrl,
			&i.GuiUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDockerByName = `-- name: GetDockerByName :one
SELECT
    name, directory, api_url, gui_url
FROM
    docker
WHERE
    name = ?
`

func (q *Queries) GetDockerByName(ctx context.Context, name string) (Docker, error) {
	row := q.db.QueryRowContext(ctx, getDockerByName, name)
	var i Docker
	err := row.Scan(
		&i.Name,
		&i.Directory,
		&i.ApiUrl,
		&i.GuiUrl,
	)
	return i, err
}

const getKubernetesByName = `-- name: GetKubernetesByName :one
SELECT
    name, directory, context, api_url, gui_url
FROM
    kubernetes
WHERE
    name = ?
`

func (q *Queries) GetKubernetesByName(ctx context.Context, name string) (Kubernetes, error) {
	row := q.db.QueryRowContext(ctx, getKubernetesByName, name)
	var i Kubernetes
	err := row.Scan(
		&i.Name,
		&i.Directory,
		&i.Context,
		&i.ApiUrl,
		&i.GuiUrl,
	)
	return i, err
}

const insertDocker = `-- name: InsertDocker :one
INSERT INTO
    docker (name, directory, api_url, gui_url)
VALUES
    (?, ?, ?, ?)
RETURNING
    name, directory, api_url, gui_url
`

type InsertDockerParams struct {
	Name      string
	Directory string
	ApiUrl    string
	GuiUrl    string
}

func (q *Queries) InsertDocker(ctx context.Context, arg InsertDockerParams) (Docker, error) {
	row := q.db.QueryRowContext(ctx, insertDocker,
		arg.Name,
		arg.Directory,
		arg.ApiUrl,
		arg.GuiUrl,
	)
	var i Docker
	err := row.Scan(
		&i.Name,
		&i.Directory,
		&i.ApiUrl,
		&i.GuiUrl,
	)
	return i, err
}

const insertKubernetes = `-- name: InsertKubernetes :one
INSERT INTO
    kubernetes (name, directory, context, api_url, gui_url)
VALUES
    (?, ?, ?, ?, ?)
RETURNING
    name, directory, context, api_url, gui_url
`

type InsertKubernetesParams struct {
	Name      string
	Directory string
	Context   string
	ApiUrl    string
	GuiUrl    string
}

func (q *Queries) InsertKubernetes(ctx context.Context, arg InsertKubernetesParams) (Kubernetes, error) {
	row := q.db.QueryRowContext(ctx, insertKubernetes,
		arg.Name,
		arg.Directory,
		arg.Context,
		arg.ApiUrl,
		arg.GuiUrl,
	)
	var i Kubernetes
	err := row.Scan(
		&i.Name,
		&i.Directory,
		&i.Context,
		&i.ApiUrl,
		&i.GuiUrl,
	)
	return i, err
}
