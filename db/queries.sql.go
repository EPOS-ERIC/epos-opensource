// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
)

const deleteEnv = `-- name: DeleteEnv :exec
DELETE FROM
    environment
WHERE
    name = ?
    AND platform = ?
`

type DeleteEnvParams struct {
	Name     string
	Platform string
}

func (q *Queries) DeleteEnv(ctx context.Context, arg DeleteEnvParams) error {
	_, err := q.db.ExecContext(ctx, deleteEnv, arg.Name, arg.Platform)
	return err
}

const getAllEnvs = `-- name: GetAllEnvs :many
SELECT
    name, directory, platform
FROM
    environment
`

func (q *Queries) GetAllEnvs(ctx context.Context) ([]Environment, error) {
	rows, err := q.db.QueryContext(ctx, getAllEnvs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Environment
	for rows.Next() {
		var i Environment
		if err := rows.Scan(&i.Name, &i.Directory, &i.Platform); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlatformEnvs = `-- name: GetPlatformEnvs :many
SELECT
    name, directory, platform
FROM
    environment
WHERE
    platform = ?
`

func (q *Queries) GetPlatformEnvs(ctx context.Context, platform string) ([]Environment, error) {
	rows, err := q.db.QueryContext(ctx, getPlatformEnvs, platform)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Environment
	for rows.Next() {
		var i Environment
		if err := rows.Scan(&i.Name, &i.Directory, &i.Platform); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEnv = `-- name: InsertEnv :one
INSERT INTO
    environment (name, directory, platform)
VALUES
    (?, ?, ?)
RETURNING
    name, directory, platform
`

type InsertEnvParams struct {
	Name      string
	Directory string
	Platform  string
}

func (q *Queries) InsertEnv(ctx context.Context, arg InsertEnvParams) (Environment, error) {
	row := q.db.QueryRowContext(ctx, insertEnv, arg.Name, arg.Directory, arg.Platform)
	var i Environment
	err := row.Scan(&i.Name, &i.Directory, &i.Platform)
	return i, err
}
