package k8score

import (
	"bufio"
	"os"
	"path/filepath"
	"strings"
	"testing"
)

func TestExport(t *testing.T) {
	// Setup function type for creating test conditions
	type setupFn func(t *testing.T) (path string, cleanup func())

	tests := []struct {
		name          string
		setup         setupFn
		expectedFiles []string
		wantErr       bool
	}{
		{
			name: "success - existing dir",
			setup: func(t *testing.T) (string, func()) {
				return t.TempDir(), func() {}
			},
			expectedFiles: []string{".env", "namespace.yaml", "deployment-gateway.yaml"}, // Sample of files
			wantErr:       false,
		},
		{
			name: "success - dir auto-created",
			setup: func(t *testing.T) (string, func()) {
				path := filepath.Join(t.TempDir(), "nested", "dir")
				return path, func() {}
			},
			expectedFiles: []string{".env", "namespace.yaml"},
			wantErr:       false,
		},
		{
			name: "success - empty path uses cwd",
			setup: func(t *testing.T) (string, func()) {
				origDir, err := os.Getwd()
				if err != nil {
					t.Fatalf("failed to get current dir: %v", err)
				}
				tmpDir := t.TempDir()
				if err := os.Chdir(tmpDir); err != nil {
					t.Fatalf("failed to change dir: %v", err)
				}
				return "", func() {
					if err := os.Chdir(origDir); err != nil {
						t.Fatalf("failed to restore dir: %v", err)
					}
				}
			},
			expectedFiles: []string{".env", "namespace.yaml"},
			wantErr:       false,
		},
		{
			name: "failure - path is a file",
			setup: func(t *testing.T) (string, func()) {
				tmpFile, err := os.CreateTemp(t.TempDir(), "not-a-dir")
				if err != nil {
					t.Fatalf("failed to create temp file: %v", err)
				}
				_ = tmpFile.Close()
				return tmpFile.Name(), func() {}
			},
			expectedFiles: nil,
			wantErr:       true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			exportPath, cleanup := tt.setup(t)
			defer cleanup()

			opts := ExportOpts{Path: exportPath}
			err := Export(opts)

			if (err != nil) != tt.wantErr {
				t.Errorf("Export() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if !tt.wantErr {
				verifyPath := exportPath
				if verifyPath == "" {
					cwd, err := os.Getwd()
					if err != nil {
						t.Fatalf("failed to get cwd for verification: %v", err)
					}
					verifyPath = cwd
				}

				for _, filename := range tt.expectedFiles {
					filePath := filepath.Join(verifyPath, filename)
					if _, err := os.Stat(filePath); os.IsNotExist(err) {
						t.Errorf("Export() did not create expected file: %s", filePath)
					}

					file, err := os.Open(filePath)
					if err != nil {
						t.Fatalf("Failed to open exported file %s: %v", filePath, err)
					}
					defer file.Close()

					scanner := bufio.NewScanner(file)
					if !scanner.Scan() {
						t.Errorf("Exported file is empty: %s", filePath)
					}
					firstLine := scanner.Text()
					if !strings.HasPrefix(firstLine, "# Generated by EPOS") {
						t.Errorf("Exported file %s is missing expected header. Got: %s", filePath, firstLine)
					}
				}
			}
		})
	}
}
